#ifndef HSH_TRAIT_TEMPLATE_PARMS
#define HSH_TRAIT_TEMPLATE_PARMS
#endif
#ifndef HSH_TRAIT_TEMPLATE_REFS
#define HSH_TRAIT_TEMPLATE_REFS
#endif
#define HSH_XSTR(s) HSH_STR(s)
#define HSH_STR(s) #s
#ifdef HSH_TRAIT_BINDING
struct HSH_TRAIT_BINDING;
#endif
#ifdef HSH_MULTI_TRAIT
HSH_TRAIT_TEMPLATE_PARMS
struct HSH_MULTI_TRAIT {
#ifdef HSH_TRAIT_OWNER
  using Owner = HSH_TRAIT_OWNER;
#endif
#ifdef HSH_TRAIT_BINDING
  using Binding = HSH_TRAIT_BINDING;
  operator Binding() const noexcept {
#define HSH_ACTIVE_TARGET(Enumeration) assert(CurrentTarget == Target::Enumeration && "bad cast"); return Binding(get_##Enumeration());
#include "targets.def"
  }
#endif
#define HSH_ACTIVE_TARGET(Enumeration) static_assert(std::is_trivially_copyable_v<TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS>, "TargetTraits<" #Enumeration ">::" HSH_XSTR(HSH_MULTI_TRAIT) HSH_XSTR(HSH_TRAIT_TEMPLATE_REFS) " is not trivially copyable");
#include "targets.def"
  std::aligned_union_t<0
#define HSH_ACTIVE_TARGET(Enumeration) , TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS
#include "targets.def"
    > _Storage;
HSH_MULTI_TRAIT() noexcept : _Storage{} {}
#define HSH_ACTIVE_TARGET(Enumeration) \
HSH_MULTI_TRAIT(const TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS &Obj) noexcept { new (std::addressof(_Storage)) TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS(Obj); } \
operator TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS &() noexcept { assert(CurrentTarget == Target::Enumeration && "bad cast"); return *reinterpret_cast<TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS &get_##Enumeration() noexcept { assert(CurrentTarget == Target::Enumeration && "bad cast"); return *reinterpret_cast<TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
operator const TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS &() const noexcept { assert(CurrentTarget == Target::Enumeration && "bad cast"); return *reinterpret_cast<const TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
const TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS &get_##Enumeration() const noexcept { assert(CurrentTarget == Target::Enumeration && "bad cast"); return *reinterpret_cast<const TargetTraits<Target::Enumeration>::HSH_MULTI_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
bool isValid() const noexcept { return get_##Enumeration().isValid(); }
#include "targets.def"
};
#undef HSH_MULTI_TRAIT
#endif

#ifdef HSH_SINGLE_TRAIT
HSH_TRAIT_TEMPLATE_PARMS
struct HSH_SINGLE_TRAIT {
#ifdef HSH_TRAIT_OWNER
  using Owner = HSH_TRAIT_OWNER;
#endif
#ifdef HSH_TRAIT_BINDING
  using Binding = HSH_TRAIT_BINDING;
  operator Binding() const noexcept {
#define HSH_ACTIVE_TARGET(Enumeration) return Binding(get_##Enumeration());
#include "targets.def"
  }
#endif
HSH_SINGLE_TRAIT() noexcept : _Storage{} {}
#define HSH_ACTIVE_TARGET(Enumeration) \
static_assert(std::is_trivially_copyable_v<TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS>, "TargetTraits::" HSH_XSTR(HSH_SINGLE_TRAIT) HSH_XSTR(HSH_TRAIT_TEMPLATE_REFS) " is not trivially copyable"); \
std::aligned_storage_t<sizeof(TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS), alignof(TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS)> _Storage; \
HSH_SINGLE_TRAIT(const TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS &Obj) noexcept { new (std::addressof(_Storage)) TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS(Obj); } \
operator TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS &() noexcept { return *reinterpret_cast<TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS &get_##Enumeration() noexcept { return *reinterpret_cast<TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
operator const TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS &() const noexcept { return *reinterpret_cast<const TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
const TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS &get_##Enumeration() const noexcept { return *reinterpret_cast<const TargetTraits::HSH_SINGLE_TRAIT HSH_TRAIT_TEMPLATE_REFS *>(std::addressof(_Storage)); } \
bool IsValid() const noexcept { return get_##Enumeration().IsValid(); }
#include "targets.def"
  };
#undef HSH_SINGLE_TRAIT
#endif

#undef HSH_TRAIT_TEMPLATE_PARMS
#undef HSH_TRAIT_TEMPLATE_REFS
#undef HSH_TRAIT_OWNER
#undef HSH_TRAIT_BINDING
#undef HSH_XSTR
#undef HSH_STR
